{"version":3,"file":"static/js/main.90f6213f.js","mappings":"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","sources":["index.js"],"sourcesContent":["// Global variables\nlet selectedProgram = null;\nlet currentExerciseIndex = 0;\nlet isResting = false;\n\n// Predefined programs\nconst programs = {\n  allBody: {\n    name: \"All Body\",\n    exercises: [\n      { sets: 3, reps: 10, exercise: \"Leg Extensions\", weight: 20, completedSets: 0 },\n      { sets: 3, reps: 10, exercise: \"Leg Press\", weight: 30, completedSets: 0 },\n      { sets: 3, reps: 10, exercise: \"Cable Rows\", weight: 25, completedSets: 0 },\n      { sets: 3, reps: 10, exercise: \"DumbBell Rows\", weight: 15, completedSets: 0 },\n      { sets: 3, reps: 10, exercise: \"Bicep Curls\", weight: 7.5, completedSets: 0 },\n      { sets: 3, reps: 12, exercise: \"Cable Rope Curls\", weight: 10, completedSets: 0 },\n      { sets: 3, reps: 5, exercise: \"Leg Raises\", weight: 0, completedSets: 0 }\n    ]\n  }\n};\n\n// UI elements\nconst startScreen = document.getElementById(\"start-screen\");\nconst configScreen = document.getElementById(\"config-screen\");\nconst progressScreen = document.getElementById(\"progress-screen\");\nconst completionMessage = document.getElementById(\"completion-message\");\n\nconst programDropdown = document.getElementById(\"program-dropdown\");\nconst startProgramBtn = document.getElementById(\"start-program-btn\");\nconst startSetBtn = document.getElementById(\"start-set-btn\");\nconst completeSetBtn = document.getElementById(\"complete-set-btn\");\nconst skipRestBtn = document.getElementById(\"skip-rest-btn\");\nconst backToConfigBtn = document.getElementById(\"back-to-config-btn\");\nconst restartProgramBtn = document.getElementById(\"restart-program-btn\");\n\n// Initialize program dropdown\nfunction populateProgramDropdown() {\n  Object.keys(programs).forEach((key) => {\n    const option = document.createElement(\"option\");\n    option.value = key;\n    option.textContent = programs[key].name;\n    programDropdown.appendChild(option);\n  });\n}\n\n// Show screens\nfunction showScreen(screen) {\n  [startScreen, configScreen, progressScreen, completionMessage].forEach((s) => {\n    s.classList.add(\"hidden\");\n  });\n  screen.classList.remove(\"hidden\");\n}\n\n// Show current exercise on config screen\nfunction showConfigScreen() {\n  const exercise = selectedProgram.exercises[currentExerciseIndex];\n  document.getElementById(\"exercise-name\").textContent = exercise.exercise;\n  document.getElementById(\"edit-weight\").value = exercise.weight;\n  document.getElementById(\"edit-reps\").value = exercise.reps;\n}\n\n// Show progress on progress screen\nfunction showProgressScreen() {\n  const exercise = selectedProgram.exercises[currentExerciseIndex];\n  if (!exercise) {\n    showScreen(completionMessage);\n    return;\n  }\n  document.getElementById(\"current-exercise\").textContent = exercise.exercise;\n  document.getElementById(\"set-progress\").textContent = `Set ${exercise.completedSets + 1} of ${exercise.sets}`;\n  document.getElementById(\"current-weight\").textContent = `Weight: ${exercise.weight} lbs`;\n  document.getElementById(\"current-reps\").textContent = `Reps: ${exercise.reps}`;\n}\n// Start program\nstartProgramBtn.addEventListener(\"click\", () => {\n  const selectedProgramKey = programDropdown.value;\n  if (!selectedProgramKey) return;\n\n  selectedProgram = JSON.parse(JSON.stringify(programs[selectedProgramKey])); // Clone program\n  currentExerciseIndex = 0;\n  showConfigScreen();\n  showScreen(configScreen);\n});\n\n// Start set\nstartSetBtn.addEventListener(\"click\", () => {\n  const weightInput = document.getElementById(\"edit-weight\").value;\n  const repsInput = document.getElementById(\"edit-reps\").value;\n\n  const exercise = selectedProgram.exercises[currentExerciseIndex];\n  exercise.weight = Number(weightInput);\n  exercise.reps = Number(repsInput);\n\n  showProgressScreen();\n  showScreen(progressScreen);\n});\n\n// Complete set\ncompleteSetBtn.addEventListener(\"click\", () => {\n  const exercise = selectedProgram.exercises[currentExerciseIndex];\n  exercise.completedSets++;\n\n  if (exercise.completedSets >= exercise.sets) {\n    currentExerciseIndex++;\n    if (currentExerciseIndex < selectedProgram.exercises.length) {\n      selectedProgram.exercises[currentExerciseIndex].completedSets = 0;\n    }\n  }\n\n  if (currentExerciseIndex >= selectedProgram.exercises.length) {\n    showScreen(completionMessage);\n  } else {\n    showProgressScreen();\n  }\n});\n\n// Skip rest\nskipRestBtn.addEventListener(\"click\", () => {\n  isResting = false; // Reset rest state\n  showProgressScreen();\n});\n\n// Back to config\nbackToConfigBtn.addEventListener(\"click\", () => {\n  showConfigScreen();\n  showScreen(configScreen);\n});\n\n// Restart program\nrestartProgramBtn.addEventListener(\"click\", () => {\n  currentExerciseIndex = 0;\n  selectedProgram.exercises.forEach((exercise) => {\n    exercise.completedSets = 0;\n  });\n  showScreen(startScreen);\n});\n\n// Initial setup\npopulateProgramDropdown();\nshowScreen(startScreen);\n\n"],"names":["selectedProgram","currentExerciseIndex","isResting","programs","allBody","name","exercises","sets","reps","exercise","weight","completedSets","startScreen","document","getElementById","configScreen","progressScreen","completionMessage","programDropdown","startProgramBtn","startSetBtn","completeSetBtn","skipRestBtn","backToConfigBtn","restartProgramBtn","showScreen","screen","forEach","s","classList","add","remove","showConfigScreen","textContent","value","showProgressScreen","addEventListener","selectedProgramKey","JSON","parse","stringify","weightInput","repsInput","Number","length","Object","keys","key","option","createElement","appendChild"],"sourceRoot":""}